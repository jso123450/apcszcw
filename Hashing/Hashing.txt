Hashing / Hash Tables
- we want to store things in a table by index (array)
- we have to take a unique ID and convert it into a table index to store it
- hash function h(x) is a mapping function
  it takes a piece of information and converts it into an index to our hash table
  ie. OSIS #s
      h(x) = x % 10,000 (converts OSIS to a 4 digit index)
      h(x) = 7 (v. nice hash function)

Problem: Clash/Collision
- multiple objects can hash to the same slot/index
- Resolutions
  - hash table's array has to be sufficiently large (sparsely populated)
  - hash function should do a good job distributing items in the table


ex:
int hash(String s){
  h = 1;
  for (i = 0 to s.length)
    h = h * 11 + int(s.charAt(i));
  return h % table size;
}

Closed Hashing
- everything is stored in the array
collision
	-> rehashing
	-> lienar probing
	-> leave space in the table using a multiplier
	insert expected O(1)
	retrieval expected O(1)
